/*
 * This file was generated by dbusidl2cpp version 0.5
 * when processing input file org.kde.karm.Karm.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#include "karmadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class KarmAdaptor
 */

KarmAdaptor::KarmAdaptor(QObject *parent)
   : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KarmAdaptor::~KarmAdaptor()
{
    // destructor
}

int KarmAdaptor::addTask(const QString &taskName)
{
    // handle method call org.kde.karm.Karm.addTask
    int out0;
    QMetaObject::invokeMethod(parent(), "addTask", Q_RETURN_ARG(int, out0), Q_ARG(QString, taskName));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->addTask(taskName);
    return out0;
}

int KarmAdaptor::bookTime(const QString &taskId, const QString &iso8601StartDateTime, int durationInMinutes)
{
    // handle method call org.kde.karm.Karm.bookTime
    int out0;
    QMetaObject::invokeMethod(parent(), "bookTime", Q_RETURN_ARG(int, out0), Q_ARG(QString, taskId), Q_ARG(QString, iso8601StartDateTime), Q_ARG(int, durationInMinutes));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->bookTime(taskId, iso8601StartDateTime, durationInMinutes);
    return out0;
}

QString KarmAdaptor::deletetodo()
{
    // handle method call org.kde.karm.Karm.deletetodo
    QString out0;
    QMetaObject::invokeMethod(parent(), "deletetodo", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->deletetodo();
    return out0;
}

QString KarmAdaptor::exportcsvfile(const QString &filename, const QString &from, const QString &to, int type, bool decimalMinutes, bool allTasks, const QString &delimiter, const QString &quote)
{
    // handle method call org.kde.karm.Karm.exportcsvfile
    QString out0;
    QMetaObject::invokeMethod(parent(), "exportcsvfile", Q_RETURN_ARG(QString, out0), Q_ARG(QString, filename), Q_ARG(QString, from), Q_ARG(QString, to), Q_ARG(int, type), Q_ARG(bool, decimalMinutes), Q_ARG(bool, allTasks), Q_ARG(QString, delimiter), Q_ARG(QString, quote));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->exportcsvfile(filename, from, to, type, decimalMinutes, allTasks, delimiter, quote);
    return out0;
}

QString KarmAdaptor::getError(int karmErrorNumber)
{
    // handle method call org.kde.karm.Karm.getError
    QString out0;
    QMetaObject::invokeMethod(parent(), "getError", Q_RETURN_ARG(QString, out0), Q_ARG(int, karmErrorNumber));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getError(karmErrorNumber);
    return out0;
}

bool KarmAdaptor::getpromptdelete()
{
    // handle method call org.kde.karm.Karm.getpromptdelete
    bool out0;
    QMetaObject::invokeMethod(parent(), "getpromptdelete", Q_RETURN_ARG(bool, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getpromptdelete();
    return out0;
}

QString KarmAdaptor::importplannerfile(const QString &filename)
{
    // handle method call org.kde.karm.Karm.importplannerfile
    QString out0;
    QMetaObject::invokeMethod(parent(), "importplannerfile", Q_RETURN_ARG(QString, out0), Q_ARG(QString, filename));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->importplannerfile(filename);
    return out0;
}

void KarmAdaptor::quit()
{
    // handle method call org.kde.karm.Karm.quit
    QMetaObject::invokeMethod(parent(), "quit");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->quit();
}

bool KarmAdaptor::save()
{
    // handle method call org.kde.karm.Karm.save
    bool out0;
    QMetaObject::invokeMethod(parent(), "save", Q_RETURN_ARG(bool, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->save();
    return out0;
}

QString KarmAdaptor::setPerCentComplete(const QString &taskName, int perCent)
{
    // handle method call org.kde.karm.Karm.setPerCentComplete
    QString out0;
    QMetaObject::invokeMethod(parent(), "setPerCentComplete", Q_RETURN_ARG(QString, out0), Q_ARG(QString, taskName), Q_ARG(int, perCent));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->setPerCentComplete(taskName, perCent);
    return out0;
}

QString KarmAdaptor::setpromptdelete(bool &prompt)
{
    // handle method call org.kde.karm.Karm.setpromptdelete
    QString out0;

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->setpromptdelete(prompt);
    return out0;
}

QString KarmAdaptor::starttimerfor(const QString &taskname)
{
    // handle method call org.kde.karm.Karm.starttimerfor
    QString out0;
    QMetaObject::invokeMethod(parent(), "starttimerfor", Q_RETURN_ARG(QString, out0), Q_ARG(QString, taskname));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->starttimerfor(taskname);
    return out0;
}

QString KarmAdaptor::stopalltimers()
{
    // handle method call org.kde.karm.Karm.stopalltimers
    QString out0;
    QMetaObject::invokeMethod(parent(), "stopalltimers", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->stopalltimers();
    return out0;
}

QString KarmAdaptor::stoptimerfor(const QString &taskname)
{
    // handle method call org.kde.karm.Karm.stoptimerfor
    QString out0;
    QMetaObject::invokeMethod(parent(), "stoptimerfor", Q_RETURN_ARG(QString, out0), Q_ARG(QString, taskname));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->stoptimerfor(taskname);
    return out0;
}

QString KarmAdaptor::taskIdFromName(const QString &taskName)
{
    // handle method call org.kde.karm.Karm.taskIdFromName
    QString out0;
    QMetaObject::invokeMethod(parent(), "taskIdFromName", Q_RETURN_ARG(QString, out0), Q_ARG(QString, taskName));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->taskIdFromName(taskName);
    return out0;
}

int KarmAdaptor::totalMinutesForTaskId(const QString &taskId)
{
    // handle method call org.kde.karm.Karm.totalMinutesForTaskId
    int out0;
    QMetaObject::invokeMethod(parent(), "totalMinutesForTaskId", Q_RETURN_ARG(int, out0), Q_ARG(QString, taskId));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->totalMinutesForTaskId(taskId);
    return out0;
}

QString KarmAdaptor::version()
{
    // handle method call org.kde.karm.Karm.version
    QString out0;
    QMetaObject::invokeMethod(parent(), "version", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->version();
    return out0;
}


#include "karmadaptor.moc"
